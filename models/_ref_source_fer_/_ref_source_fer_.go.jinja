package {{ source }}

import (
	"context"
	"errors"
	"time"

	log "github.com/Golang-Tools/loggerhelper/v2"
	"github.com/Golang-Tools/sqlhelper/v2/bunproxy"
	"github.com/uptrace/bun"
)

// {{ source | title }} 学生类
type {{ source | title }} struct {
	bun.BaseModel `bun:"{{ source }}" json:"-" swaggerignore:"true"`
	ID            int32     `bun:"id,pk" json:"ID,omitempty"`
	Name          string    `bun:"name,unique,notnull" json:"Name,omitempty"`
	CreatedAt     time.Time `bun:",nullzero,notnull,default:current_timestamp" json:"CreatedAt,omitempty"`
	DeletedAt     time.Time `bun:",soft_delete" json:"-"`
}


//GetByID 通过用户ID获得用户在数据库中的信息
func GetByID(id int32) (*{{ source | title }}, error) {
	newu := {{ source | title }}{}
	ctx, cancel := bunproxy.Default.NewCtx()
	defer cancel()
	err := bunproxy.Default.NewSelect().Model(&newu).Where("id = ?", id).Scan(ctx)
	if err != nil {
		return nil, err
	}
	return &newu, nil
}

//到数据库的操作
// FindList 获取学生列表
func FindList() (*[]{{ source | title }}, error) {
	newu := []{{ source | title }}{}
	ctx, cancel := bunproxy.Default.NewCtx()
	defer cancel()
	err := bunproxy.Default.NewSelect().Model(&newu).Order("ctime DESC").Scan(ctx)
	if err != nil {
		return nil, err
	}
	return &newu, nil
}

//Count 查看数据库种的对象个数
func Count() (int, error) {
	newu := {{ source | title }}{}
	ctx, cancel := bunproxy.Default.NewCtx()
	defer cancel()
	res, err := bunproxy.Default.NewSelect().Model(&newu).Count(ctx)
	if err != nil {
		return 0, err
	}
	return res, nil
}

func (u *{{ source | title }}) Sync() error {
	if u.ID > 0 {
		ctx, cancel := bunproxy.Default.NewCtx()
		defer cancel()
		err := bunproxy.Default.NewSelect().Model(u).WherePK().Scan(ctx)
		if err != nil {
			return err
		}
		return nil
	} else {
		return errors.New("{{ source | title }} ID <= 0")
	}
}

//Delete 软删除用户,如果ID为>0的数则删除对应id的用户数据
func (u *{{ source | title }}) Delete() error {
	if u.ID > 0 {
		ctx, cancel := bunproxy.Default.NewCtx()
		defer cancel()
		_, err := bunproxy.Default.NewDelete().Model(u).WherePK().Exec(ctx)
		if err != nil {
			return err
		}
		return nil
	} else {
		return errors.New("{{ source | title }} ID <= 0")
	}
}

//Save 保存对象到目标数据库,如果有ID则更新覆盖,没有则创建
func (u *{{ source | title }}) Save() error {
	if u.ID > 0 {
		ctx, cancel := bunproxy.Default.NewCtx()
		defer cancel()
		_, err := bunproxy.Default.NewInsert().Model(u).On("CONFLICT (id) DO UPDATE").Set("name = EXCLUDED.name").Exec(ctx)
		return err
	} else {
		return errors.New("{{ source | title }} ID <= 0")
	}
}

// 回调操作
// {{ source | title }}RegistCallback 需要注册到db代理上的回调
func {{ source | title }}RegistCallback(db *bun.DB) error {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	_, err := db.NewCreateTable().Model(&{{ source | title }}{}).IfNotExists().Exec(ctx)
	if err != nil {
		log.Error("NewCreateTable get err", log.Dict{"err": err.Error()})
		return err
	}
	log.Info("NewCreateTable ok")

	count, err := db.NewSelect().Model((*{{ source | title }})(nil)).Count(ctx)
	if err != nil {
		log.Error("user exists get error", log.Dict{"err": err.Error()})
		return err
	}
	if count == 0 {
		// default{{ source | title }}s := []{{ source | title }}{
		// 	{Name: "Tom"},
		// 	{Name: "Jerry"},
		// }
		default{{ source | title }} := &{{ source | title }}{Name: "Tom"}
		_, err := db.NewInsert().Model(default{{ source | title }}).Exec(ctx)
		if err != nil {
			log.Error("Insert {{ source }} get error", log.Dict{"err": err.Error()})
			return err
		}
		log.Info("Insert {{ source }} ok")
		return nil
	} else {
		log.Info("model already inited")
	}

	return nil
}
