package auth

import (
	"github.com/Golang-Tools/grpcsdk"
	"github.com/Golang-Tools/jwthelper/v2"
	"github.com/Golang-Tools/jwthelper/v2/sdk"
	"github.com/Golang-Tools/optparams"
	"github.com/Golang-Tools/sqlhelper/v2/bunproxy"
)

// type ApiBinder func(gin_middleware.AuthMiddlewareFactoryFunc) func(*gin.Engine)

//Options auth模块初始化参数
type Options struct {
	AppVersion      string
	AppName         string
	DBURL           string
	DBProxyinitopts []optparams.Option[bunproxy.Options]
	// ApiBinders      []ApiBinder
	Verifier jwthelper.UniversalJwtVerifier
	Signer   jwthelper.UniversalJwtSigner
}

//WithAppVersion 设置模块所在应用的版本
func WithAppVersion(version string) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		o.AppVersion = version
	})
}

//WithAppName 设置模块所在应用的名字
func WithAppName(name string) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		o.AppName = name
	})
}

//WithDBURL 设置初始化数据库的url
func WithDBURL(url string) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		o.DBURL = url
	})
}

//WithDBProxyInitOpts 设置初始化数据库的配置
func WithDBProxyInitOpts(opts ...optparams.Option[bunproxy.Options]) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		o.DBProxyinitopts = opts
	})
}

//WithSigner 设置使用的签名器
func WithSigner(opts ...optparams.Option[jwthelper.SignerOptions]) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		signer, err := jwthelper.NewSigner(opts...)
		if err != nil {
			panic(err)
		}
		o.Signer = signer
	})
}

//WithRemoteSigner 设置使用的远程签名器
func WithRemoteSigner(opts ...optparams.Option[grpcsdk.SDKConfig]) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		signer := sdk.NewSignerSDK()
		signer.Init(opts...)
		o.Signer = signer
	})
}

//WithVerifier 设置使用的签名校验器
func WithVerifier(opts ...optparams.Option[jwthelper.VerifierOptions]) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		verifier, err := jwthelper.NewVerifier(opts...)
		if err != nil {
			panic(err)
		}
		o.Verifier = verifier
	})
}

//WithRemoteVerifier 设置使用的远程签名校验器
func WithRemoteVerifier(opts ...optparams.Option[grpcsdk.SDKConfig]) optparams.Option[Options] {
	return optparams.NewFuncOption(func(o *Options) {
		verifier := sdk.NewVerifierSDK()
		verifier.Init(opts...)
		o.Verifier = verifier
	})
}
