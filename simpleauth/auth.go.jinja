// auth 最简单的用户认证模块
// 逻辑是所有注册用户可以访问除用户管理系统外的接口,但只有admin用户可以访问用户管理系统
// 用户无法自己注册必须由admin用户添加
// 适用于一些需要快速实现的toB的管理系统
package auth

import (
	"{{ app_name }}/auth/apis"
	"{{ app_name }}/auth/models"

	"github.com/Golang-Tools/jwthelper"
	"github.com/Golang-Tools/jwthelper/gin_middleware"
	"github.com/Golang-Tools/jwthelper/sdk"
	"github.com/Golang-Tools/sqlhelper"
	"github.com/gin-gonic/gin"
)

type ApiBinder func(gin_middleware.AuthMiddlewareFactoryFunc) func(*gin.Engine)

//initOptions auth模块初始化参数
type initOptions struct {
	DBProxyinitopts []sqlhelper.Option
	ApiBinders      []ApiBinder
	Verifier        jwthelper.UniversalJwtVerifier
	Signer          jwthelper.UniversalJwtSigner
}

type InitOption interface {
	Apply(*initOptions)
}

// func (emptyOption) apply(*initOptions) {}
type funcinitOption struct {
	f func(*initOptions)
}

func (fo *funcinitOption) Apply(do *initOptions) {
	fo.f(do)
}

func newFuncSignOption(f func(*initOptions)) *funcinitOption {
	return &funcinitOption{
		f: f,
	}
}

//WithDBProxyInitOpts 设置初始化数据库的配置
func WithDBProxyInitOpts(opts ...sqlhelper.Option) InitOption {
	return newFuncSignOption(func(o *initOptions) {
		o.DBProxyinitopts = opts
	})
}

//WithApiBinders 设置使用api绑定器
func WithApiBinders(binders ...ApiBinder) InitOption {
	return newFuncSignOption(func(o *initOptions) {
		o.ApiBinders = binders
	})
}

//WithSigner 设置使用的签名器
func WithSigner(opts ...jwthelper.SignerOption) InitOption {
	return newFuncSignOption(func(o *initOptions) {
		signer, err := jwthelper.NewSigner(opts...)
		if err != nil {
			panic(err)
		}
		o.Signer = signer
	})
}

//WithRemoteSigner 设置使用的远程签名器
func WithRemoteSigner(c *sdk.SDKConfig) InitOption {
	return newFuncSignOption(func(o *initOptions) {
		s := c.NewSDK()
		signer, err := s.NewSigner()
		if err != nil {
			panic(err)
		}
		o.Signer = signer
	})
}

//WithVerifier 设置使用的签名校验器
func WithVerifier(opts ...jwthelper.VerifierOption) InitOption {
	return newFuncSignOption(func(o *initOptions) {
		verifier, err := jwthelper.NewVerifier(opts...)
		if err != nil {
			panic(err)
		}
		o.Verifier = verifier
	})
}

//WithRemoteVerifier 设置使用的远程签名校验器
func WithRemoteVerifier(c *sdk.SDKConfig) InitOption {
	return newFuncSignOption(func(o *initOptions) {
		s := c.NewSDK()
		verifier, err := s.NewVerifier()
		if err != nil {
			panic(err)
		}
		o.Verifier = verifier
	})
}

type Close func()

//Init 初始化组件
func Init(app *gin.Engine, salt string, opts ...InitOption) (Close, error) {
	dopts := initOptions{}
	for _, opt := range opts {
		opt.Apply(&dopts)
	}
	dbproxy := sqlhelper.New()
	if dopts.Signer == nil {
		signer, err := jwthelper.NewSigner(jwthelper.WithSignSecretKey([]byte(salt)))
		if err != nil {
			return nil, err
		}
		dopts.Signer = signer
	}
	if dopts.Verifier == nil {
		verifier, err := jwthelper.NewVerifier(jwthelper.WithVerifySecretKey([]byte(salt)))
		if err != nil {
			return nil, err
		}
		dopts.Verifier = verifier
	}
	AuthMiddlewareFactory := models.Init(dbproxy, dopts.Verifier, dopts.Signer, salt)
	for _, binder := range dopts.ApiBinders {
		binder(AuthMiddlewareFactory)(app)
	}
	apis.Init(app, dbproxy, dopts.Signer, salt, AuthMiddlewareFactory)
	err := dbproxy.Init(dopts.DBProxyinitopts...)
	if err != nil {
		return nil, err
	}
	return func() {
		dbproxy.Close()
	}, err
}
