package events

import (
	"{{ app_name }}/events/{{ event_source }}namespace"
	"{{ app_name }}/events/universal"

	log "github.com/Golang-Tools/loggerhelper/v2"
	"github.com/Golang-Tools/optparams"
	"github.com/gin-gonic/gin"
)

type Close func()

// Init 初始化路由
func Init(app *gin.Engine, opts ...optparams.Option[Options]) Close {
	// 计时器
	opt := DefaultOptions
	optparams.GetOption(&opt, opts...)
	universal.Channel.Init(opt.RedisOpts...)
	log.Set(log.WithExtFields(log.Dict{"app_name": opt.AppName, "app_version": opt.AppVersion, "module": "event"}))
	universal.Logger = log.Export()
	log.Set(log.WithExtFields(log.Dict{}))
	{{ event_source }}namespace.Init(app.Group("/event"), opt.AuthMiddlewareFactory)
	return func() {
		universal.Channel.Close()
	}
}
